{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CS Notes Welcome! I use this space to keep my notes and documentation. In case you are wondering, CS in CS Notes stands for Computer Science . Contents MkDocs Notes Tic-Tac-Toe Rest API About me I am Ankit Anand and love tech. Learn more","title":"Home"},{"location":"#welcome-to-cs-notes","text":"Welcome! I use this space to keep my notes and documentation. In case you are wondering, CS in CS Notes stands for Computer Science .","title":"Welcome to CS Notes"},{"location":"#contents","text":"MkDocs Notes Tic-Tac-Toe Rest API","title":"Contents"},{"location":"#about-me","text":"I am Ankit Anand and love tech. Learn more","title":"About me"},{"location":"Tic-Tac-Toe-RestAPI/","text":"REST API for Tic-Tac-Toe I tried building a REST API for my Tic-Tac-Toe game which contains game logic and can be integrated with a front-end of the developer's choice i.e, web app or mobile app etc. Some important details - Language - Python (v3.11.0) Framework - Flask API Language - JSON Github Repo - https://github.com/nkitanand/tictactoe_RestAPI.git Background What is an API? API stands for Application Programming Interface. It is a technique in programming world that is used by several applications to talk to each other . Why do we need API? Let's say you are writing a program in C++ to solve some complex mathematical problems. Obviously, you are going to need some maths library that your program will use eventually. Now, You have two options - Either you can write the library on your own. (which is not practical) Alternatively, you can find some open source library (or paid library if you are $RICH ;-)) and use that to write your program. However, consider a situation where no library is available in C++ language as per your requirement but a library exists in python which exactly meets your requirement. Now, It would be awesome if there was a way to use python library in C++ program without much difficulty. That's where API comes in picture. Using API both programming language (C++ and python in this case) agree to talk to each other and take advantage of each other's functionality. Language used for communicating in API is usually JSON or XML. Using this intermediary language they can communicate with each other. Understanding API using our Tic-Tac-Toe example. Let's say there is a Tic-Tac-Toe game as a web app. This game has two components - Front-End - dealing with the look and presentation of game Back-End - dealing with the logic of the game Both components interact with each other using this API method. They use JSON to communicate. Ideally, during the start of projects both teams will agree on a JSON format that they can work with. This JSON will contain data like state of Gameboard, player info and state, winner status, etc. sequenceDiagram participant F as Front-End participant B as Back-End F->>+B: JSON (current game state) Note right of B: Execute game logic B->>-F: JSON response (updated game state) Diagram Explanation Initially Front-End will create an empty board and present to web user. After user play his move, frontend will send JSON data representing the current game state to the backend. Backend after receiving the JSON data (i.e, the game state after user has played) will read the JSON to get details about the game state. Thereafter, backend will use logic to find optimal move for bot to play. Backend will update the JSON with new game state after bot has played it's move. Backend will send this updated JSON to frontend. Frontend after receiving this new JSON data will update the game board with bot's move and will wait for the User to play his next move. And this cycle continues until game is over. Architecture JSON designed for our API is based on the schema given below. JSON Schema for our API { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"type\" : \"object\" , \"properties\" : { \"Game\" : { \"type\" : \"string\" }, \"Status\" : { \"type\" : \"string\" }, \"Winner\" : { \"type\" : \"null\" }, \"GameBoardState\" : { \"type\" : \"object\" , \"properties\" : { \"Box 1\" : { \"type\" : \"null\" }, \"Box 2\" : { \"type\" : \"null\" }, \"Box 3\" : { \"type\" : \"null\" }, \"Box 4\" : { \"type\" : \"null\" }, \"Box 5\" : { \"type\" : \"null\" }, \"Box 6\" : { \"type\" : \"null\" }, \"Box 7\" : { \"type\" : \"null\" }, \"Box 8\" : { \"type\" : \"null\" }, \"Box 9\" : { \"type\" : \"null\" } }, \"required\" : [ \"Box 1\" , \"Box 2\" , \"Box 3\" , \"Box 4\" , \"Box 5\" , \"Box 6\" , \"Box 7\" , \"Box 8\" , \"Box 9\" ] } }, \"required\" : [ \"Game\" , \"Status\" , \"Winner\" , \"GameBoardState\" ] } JSON Example { \"Game\" : \"Tic Tac Toe\" , \"Status\" : \"In Progress\" , \"Winner\" : null , \"GameBoardState\" : { \"Box 1\" : null , \"Box 2\" : null , \"Box 3\" : null , \"Box 4\" : null , \"Box 5\" : null , \"Box 6\" : null , \"Box 7\" : null , \"Box 8\" : null , \"Box 9\" : null } }","title":"Tic-Tac-Toe REST API"},{"location":"Tic-Tac-Toe-RestAPI/#rest-api-for-tic-tac-toe","text":"I tried building a REST API for my Tic-Tac-Toe game which contains game logic and can be integrated with a front-end of the developer's choice i.e, web app or mobile app etc. Some important details - Language - Python (v3.11.0) Framework - Flask API Language - JSON Github Repo - https://github.com/nkitanand/tictactoe_RestAPI.git","title":"REST API for Tic-Tac-Toe"},{"location":"Tic-Tac-Toe-RestAPI/#background","text":"","title":"Background"},{"location":"Tic-Tac-Toe-RestAPI/#what-is-an-api","text":"API stands for Application Programming Interface. It is a technique in programming world that is used by several applications to talk to each other .","title":"What is an API?"},{"location":"Tic-Tac-Toe-RestAPI/#why-do-we-need-api","text":"Let's say you are writing a program in C++ to solve some complex mathematical problems. Obviously, you are going to need some maths library that your program will use eventually. Now, You have two options - Either you can write the library on your own. (which is not practical) Alternatively, you can find some open source library (or paid library if you are $RICH ;-)) and use that to write your program. However, consider a situation where no library is available in C++ language as per your requirement but a library exists in python which exactly meets your requirement. Now, It would be awesome if there was a way to use python library in C++ program without much difficulty. That's where API comes in picture. Using API both programming language (C++ and python in this case) agree to talk to each other and take advantage of each other's functionality. Language used for communicating in API is usually JSON or XML. Using this intermediary language they can communicate with each other.","title":"Why do we need API?"},{"location":"Tic-Tac-Toe-RestAPI/#understanding-api-using-our-tic-tac-toe-example","text":"Let's say there is a Tic-Tac-Toe game as a web app. This game has two components - Front-End - dealing with the look and presentation of game Back-End - dealing with the logic of the game Both components interact with each other using this API method. They use JSON to communicate. Ideally, during the start of projects both teams will agree on a JSON format that they can work with. This JSON will contain data like state of Gameboard, player info and state, winner status, etc. sequenceDiagram participant F as Front-End participant B as Back-End F->>+B: JSON (current game state) Note right of B: Execute game logic B->>-F: JSON response (updated game state) Diagram Explanation Initially Front-End will create an empty board and present to web user. After user play his move, frontend will send JSON data representing the current game state to the backend. Backend after receiving the JSON data (i.e, the game state after user has played) will read the JSON to get details about the game state. Thereafter, backend will use logic to find optimal move for bot to play. Backend will update the JSON with new game state after bot has played it's move. Backend will send this updated JSON to frontend. Frontend after receiving this new JSON data will update the game board with bot's move and will wait for the User to play his next move. And this cycle continues until game is over.","title":"Understanding API using our Tic-Tac-Toe example."},{"location":"Tic-Tac-Toe-RestAPI/#architecture","text":"JSON designed for our API is based on the schema given below. JSON Schema for our API { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"type\" : \"object\" , \"properties\" : { \"Game\" : { \"type\" : \"string\" }, \"Status\" : { \"type\" : \"string\" }, \"Winner\" : { \"type\" : \"null\" }, \"GameBoardState\" : { \"type\" : \"object\" , \"properties\" : { \"Box 1\" : { \"type\" : \"null\" }, \"Box 2\" : { \"type\" : \"null\" }, \"Box 3\" : { \"type\" : \"null\" }, \"Box 4\" : { \"type\" : \"null\" }, \"Box 5\" : { \"type\" : \"null\" }, \"Box 6\" : { \"type\" : \"null\" }, \"Box 7\" : { \"type\" : \"null\" }, \"Box 8\" : { \"type\" : \"null\" }, \"Box 9\" : { \"type\" : \"null\" } }, \"required\" : [ \"Box 1\" , \"Box 2\" , \"Box 3\" , \"Box 4\" , \"Box 5\" , \"Box 6\" , \"Box 7\" , \"Box 8\" , \"Box 9\" ] } }, \"required\" : [ \"Game\" , \"Status\" , \"Winner\" , \"GameBoardState\" ] } JSON Example { \"Game\" : \"Tic Tac Toe\" , \"Status\" : \"In Progress\" , \"Winner\" : null , \"GameBoardState\" : { \"Box 1\" : null , \"Box 2\" : null , \"Box 3\" : null , \"Box 4\" : null , \"Box 5\" : null , \"Box 6\" : null , \"Box 7\" : null , \"Box 8\" : null , \"Box 9\" : null } }","title":"Architecture"},{"location":"randomNotes/","text":"Git Notes","title":"randomNotes"},{"location":"randomNotes/#git-notes","text":"","title":"Git Notes"},{"location":"MkDocs/MkDocs-Notes/","text":"MkDocs MkDocs is a static site generator written in python language. It uses markdown language to create webpages. This blog uses mkdocs for documentation and organising my notes. Learn more about mkdocs here Getting started with MkDocs MkDocs official getting started page Note - Before starting any python project, it is a best practice to create a virtual environment and work with that virtual environment to better manage all dependencies. Read more Create and activate virtual env - > mkdir myproject > cd myproject > py -3 -m venv venv > venv\\Scripts\\activate Install command - ( venv ) C:\\Projects\\myprojects > pip install mkdocs $ mkdocs new Create a new mkdocs project - ( venv ) C:\\Projects\\myprojects > mkdocs new . Alternatively, if you want to create a new project in a seperate directory, use this command - ( venv ) C:\\Projects > mkdocs new myprojects $ mkdocs serve This command is used to host the static site created by mkdocs locally. ( venv ) C:\\Projects\\myprojects > mkdocs serve A successful execution of this command gives output something like this - INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.95 seconds INFO - [03:56:37] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [03:56:37] Serving on http://127.0.0.1:8000/ Note - This command execution looks for docs/ directory and a mkdocs.yml configuration file where the command is run. $ mkdocs build This command build your static site inside site\\ directory. Example - C:\\Projects\\myprojects\\site\\ . For more details click here ( venv ) C:\\Projects\\myprojects > mkdocs build Note: If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore $ mkdocs gh-deploy This command is used to deploy your mkdocs documentation on github pages. ( venv ) C:\\Projects\\myprojects > mkdocs serve What happens internally when gh-deploy is run? > mkdocs gh-deploy MkDocs build your static site and push its content to gh-pages branch of the repo. Let's take a close look at the output of this command Note: For below output, mkdocs project is located in E:\\Code_Projects\\Git Repos\\CS-Notes\\ directory 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 INFO - Cleaning site directory INFO - Building documentation to directory: E:\\Code_Projects\\Git Repos\\CS-Notes\\site INFO - Documentation built in 1.11 seconds WARNING - Version check skipped: No version specified in previous deployment. INFO - Copying 'E:\\Code_Projects\\Git Repos\\CS-Notes\\site' to 'gh-pages' branch and pushing to GitHub. Enumerating objects: 65, done. Counting objects: 100% (65/65), done. Delta compression using up to 4 threads Compressing objects: 100% (58/58), done. Writing objects: 100% (65/65), 504.09 KiB | 1.40 MiB/s, done. Total 65 (delta 7), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (7/7), done. remote: remote: Create a pull request for 'gh-pages' on GitHub by visiting: remote: https://github.com/nkitanand/CS-Notes/pull/new/gh-pages remote: To github.com:nkitanand/CS-Notes.git * [new branch] gh-pages -> gh-pages INFO - Your documentation should shortly be available at: https://nkitanand.github.io/CS-Notes/ See Line 2 - Your static site is being built into site\\ directory See Line 5 - content of site\\ directory is copied to gh-pages branch of your local system See Line 17-18 - since gh-pages is not yet created in our github repo (because gh-deploy is being run for the first time), this branch will get created automatically by this command in the github repo as well. Note: If it is being run for the first time then gh-pages branch will be created by this command internally Deploying to GitHub Pages Manual deployment Use the command gh-deploy to manually deploy your changes to github pages. As a best practice, follow these 3 steps before making new changes - Make changes to your local repo and verify changes using serve command Commit your changes and push it to your main or master branch of GitHub Now, run gh-deploy command in your local system to deploy changes to github pages. Automatic deployment We can use GitHub Actions for automatically deploying changes to GitHub pages whenever a new commit is pushed to either the master or main branches. To automate follow these steps Publishing your site The great thing about hosting project documentation in a git repository is the ability to deploy it automatically when new changes are pushed. MkDocs makes this ridiculously simple. GitHub Pages If you're already hosting your code on GitHub, GitHub Pages is certainly the most convenient way to publish your project documentation. It's free of charge and pretty easy to set up. with GitHub Actions Using GitHub Actions you can automate the deployment of your project documentation. At the root of your repository, create a new GitHub Actions workflow, e.g. .github/workflows/ci.yml , and copy and paste the following contents: Material for MkDocs name : ci # (1)! on : push : branches : - master # (2)! - main permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - uses : actions/setup-python@v4 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force Note: 1. name: - You can change the name ( ci in this example) to your liking. 2. branches: - At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. 3. run: pip install mkdocs-material - This is the place to install further MkDocs plugins or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... Now, when a new commit is pushed to either the master or main branches, the static site is automatically built and deployed. Push your changes to see the workflow in action. If the GitHub Page doesn't show up after a few minutes, go to the settings of your repository and ensure that the publishing source branch for your GitHub Page is set to gh-pages . Your documentation should shortly appear at <username>.github.io/<repository> .","title":"MkDocs CheetSheet"},{"location":"MkDocs/MkDocs-Notes/#mkdocs","text":"MkDocs is a static site generator written in python language. It uses markdown language to create webpages. This blog uses mkdocs for documentation and organising my notes. Learn more about mkdocs here","title":"MkDocs"},{"location":"MkDocs/MkDocs-Notes/#getting-started-with-mkdocs","text":"MkDocs official getting started page Note - Before starting any python project, it is a best practice to create a virtual environment and work with that virtual environment to better manage all dependencies. Read more Create and activate virtual env - > mkdir myproject > cd myproject > py -3 -m venv venv > venv\\Scripts\\activate Install command - ( venv ) C:\\Projects\\myprojects > pip install mkdocs","title":"Getting started with MkDocs"},{"location":"MkDocs/MkDocs-Notes/#mkdocs-new","text":"Create a new mkdocs project - ( venv ) C:\\Projects\\myprojects > mkdocs new . Alternatively, if you want to create a new project in a seperate directory, use this command - ( venv ) C:\\Projects > mkdocs new myprojects","title":"$ mkdocs new"},{"location":"MkDocs/MkDocs-Notes/#mkdocs-serve","text":"This command is used to host the static site created by mkdocs locally. ( venv ) C:\\Projects\\myprojects > mkdocs serve A successful execution of this command gives output something like this - INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.95 seconds INFO - [03:56:37] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [03:56:37] Serving on http://127.0.0.1:8000/ Note - This command execution looks for docs/ directory and a mkdocs.yml configuration file where the command is run.","title":"$ mkdocs serve"},{"location":"MkDocs/MkDocs-Notes/#mkdocs-build","text":"This command build your static site inside site\\ directory. Example - C:\\Projects\\myprojects\\site\\ . For more details click here ( venv ) C:\\Projects\\myprojects > mkdocs build Note: If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore","title":"$ mkdocs build"},{"location":"MkDocs/MkDocs-Notes/#mkdocs-gh-deploy","text":"This command is used to deploy your mkdocs documentation on github pages. ( venv ) C:\\Projects\\myprojects > mkdocs serve","title":"$ mkdocs gh-deploy"},{"location":"MkDocs/MkDocs-Notes/#what-happens-internally-when-gh-deploy-is-run","text":"> mkdocs gh-deploy MkDocs build your static site and push its content to gh-pages branch of the repo. Let's take a close look at the output of this command Note: For below output, mkdocs project is located in E:\\Code_Projects\\Git Repos\\CS-Notes\\ directory 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 INFO - Cleaning site directory INFO - Building documentation to directory: E:\\Code_Projects\\Git Repos\\CS-Notes\\site INFO - Documentation built in 1.11 seconds WARNING - Version check skipped: No version specified in previous deployment. INFO - Copying 'E:\\Code_Projects\\Git Repos\\CS-Notes\\site' to 'gh-pages' branch and pushing to GitHub. Enumerating objects: 65, done. Counting objects: 100% (65/65), done. Delta compression using up to 4 threads Compressing objects: 100% (58/58), done. Writing objects: 100% (65/65), 504.09 KiB | 1.40 MiB/s, done. Total 65 (delta 7), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (7/7), done. remote: remote: Create a pull request for 'gh-pages' on GitHub by visiting: remote: https://github.com/nkitanand/CS-Notes/pull/new/gh-pages remote: To github.com:nkitanand/CS-Notes.git * [new branch] gh-pages -> gh-pages INFO - Your documentation should shortly be available at: https://nkitanand.github.io/CS-Notes/ See Line 2 - Your static site is being built into site\\ directory See Line 5 - content of site\\ directory is copied to gh-pages branch of your local system See Line 17-18 - since gh-pages is not yet created in our github repo (because gh-deploy is being run for the first time), this branch will get created automatically by this command in the github repo as well. Note: If it is being run for the first time then gh-pages branch will be created by this command internally","title":"What happens internally when gh-deploy is run?"},{"location":"MkDocs/MkDocs-Notes/#deploying-to-github-pages","text":"","title":"Deploying to GitHub Pages"},{"location":"MkDocs/MkDocs-Notes/#manual-deployment","text":"Use the command gh-deploy to manually deploy your changes to github pages. As a best practice, follow these 3 steps before making new changes - Make changes to your local repo and verify changes using serve command Commit your changes and push it to your main or master branch of GitHub Now, run gh-deploy command in your local system to deploy changes to github pages.","title":"Manual deployment"},{"location":"MkDocs/MkDocs-Notes/#automatic-deployment","text":"We can use GitHub Actions for automatically deploying changes to GitHub pages whenever a new commit is pushed to either the master or main branches. To automate follow these steps","title":"Automatic deployment"},{"location":"MkDocs/MkDocs-Notes/#publishing-your-site","text":"The great thing about hosting project documentation in a git repository is the ability to deploy it automatically when new changes are pushed. MkDocs makes this ridiculously simple.","title":"Publishing your site"},{"location":"MkDocs/MkDocs-Notes/#github-pages","text":"If you're already hosting your code on GitHub, GitHub Pages is certainly the most convenient way to publish your project documentation. It's free of charge and pretty easy to set up.","title":"GitHub Pages"},{"location":"MkDocs/MkDocs-Notes/#with-github-actions","text":"Using GitHub Actions you can automate the deployment of your project documentation. At the root of your repository, create a new GitHub Actions workflow, e.g. .github/workflows/ci.yml , and copy and paste the following contents: Material for MkDocs name : ci # (1)! on : push : branches : - master # (2)! - main permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - uses : actions/setup-python@v4 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force Note: 1. name: - You can change the name ( ci in this example) to your liking. 2. branches: - At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. 3. run: pip install mkdocs-material - This is the place to install further MkDocs plugins or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... Now, when a new commit is pushed to either the master or main branches, the static site is automatically built and deployed. Push your changes to see the workflow in action. If the GitHub Page doesn't show up after a few minutes, go to the settings of your repository and ensure that the publishing source branch for your GitHub Page is set to gh-pages . Your documentation should shortly appear at <username>.github.io/<repository> .","title":"with GitHub Actions"},{"location":"MkDocs/materialForMkDocs/","text":"Material for MkDocs This documentation uses Material for MkDocs . Installing mkdocs material is required before using it. Installation command pip install mkdocs-material Minimal configuration Simply add the following lines to mkdocs.yml to enable the theme: theme: name: material For more details on material for mkdocs - Installation Configuration Diagrams","title":"Material for MkDocs"},{"location":"MkDocs/materialForMkDocs/#material-for-mkdocs","text":"This documentation uses Material for MkDocs . Installing mkdocs material is required before using it.","title":"Material for MkDocs"},{"location":"MkDocs/materialForMkDocs/#installation-command","text":"pip install mkdocs-material","title":"Installation command"},{"location":"MkDocs/materialForMkDocs/#minimal-configuration","text":"Simply add the following lines to mkdocs.yml to enable the theme: theme: name: material For more details on material for mkdocs - Installation Configuration Diagrams","title":"Minimal configuration"}]}